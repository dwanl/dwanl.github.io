(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{358:function(e,v,_){"use strict";_.r(v);var t=_(17),a=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"彻底理解浏览器缓存机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#彻底理解浏览器缓存机制","aria-hidden":"true"}},[e._v("#")]),e._v(" 彻底理解浏览器缓存机制")]),e._v(" "),_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),_("p",[e._v("浏览器的缓存机制也就是我们说的 "),_("code",[e._v("HTTP")]),e._v(" 缓存机制，其机制是根据 "),_("code",[e._v("HTTP")]),e._v(" 报文的缓存标示进行的。")]),e._v(" "),_("p",[e._v("所以在分析浏览器缓存之前，我们先使用图文简单介绍一下 "),_("code",[e._v("HTTP")]),e._v(" 报文，"),_("code",[e._v("HTTP")]),e._v(" 报文分为两种：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("HTTP")]),e._v(" 请求（"),_("code",[e._v("Request")]),e._v("）报文。报文格式为：\n"),_("ol",[_("li",[_("strong",[e._v("请求行")]),e._v("。")]),e._v(" "),_("li",[_("strong",[_("code",[e._v("HTTP")]),e._v(" 头")]),e._v("（通用信息头，请求头，实体头）。")]),e._v(" "),_("li",[_("strong",[e._v("请求报文主体")]),e._v("（只有 "),_("code",[e._v("POST")]),e._v(" 才有报文主体)。")])])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/531b3efa6ddd37c8318f5f7cfed34931.png",alt:"请求报文"}}),e._v(" "),_("img",{attrs:{src:"https://qiniu.mdnice.com/fa85fd3a79ee9989dae5f580ec39a941.png",alt:"请求报文主体"}})]),e._v(" "),_("ul",[_("li",[_("code",[e._v("HTTP")]),e._v(" 响应（"),_("code",[e._v("Response")]),e._v("）报文，报文格式为：\n"),_("ol",[_("li",[_("strong",[e._v("状态行")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("HTTP")]),e._v(" 头（通用信息头，响应头，实体头）。")]),e._v(" "),_("li",[_("strong",[e._v("响应报文主体")]),e._v("。")])])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/0b5203c39d169ae326c715bd090674bd.png",alt:"响应报文"}}),e._v(" "),_("img",{attrs:{src:"https://qiniu.mdnice.com/53513029f2fb2e561ad02e2d64a0c497.png",alt:"响应报文主体"}})]),e._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[e._v("注：\n通用信息头指的是请求和响应报文都支持的头域，分别为：Cache"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Control、Connection、Date、Pragma、Transfer"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Encoding、Upgrade、Via。\n实体头则是实体信息的实体头域，分别为：Allow、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Base、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Encoding、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Language、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Length、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Location、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),_("span",{pre:!0,attrs:{class:"token constant"}},[e._v("MD5")]),e._v("、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Range、Content"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Type、Etag、Expires、Last"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Modified、extension"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("header。\n这里只是为了方便理解，将通用信息头，响应头"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("请求头，实体头都归为了"),_("span",{pre:!0,attrs:{class:"token constant"}},[e._v("HTTP")]),e._v("头。\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br")])]),_("p",[e._v("以上的概念在这里我们不做多讲解，只简单介绍，有兴趣的童鞋可以自行研究。")]),e._v(" "),_("h2",{attrs:{id:"缓存过程分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存过程分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 缓存过程分析")]),e._v(" "),_("p",[e._v("浏览器与服务器通信的方式为应答模式，即，浏览器发起 "),_("code",[e._v("HTTP")]),e._v(" 请求 –> 服务器响应该请求。")]),e._v(" "),_("p",[e._v("那么浏览器第一次向服务器发起该请求后拿到请求结果，"),_("strong",[e._v("会根据响应报文中 "),_("code",[e._v("HTTP")]),e._v(" 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中")]),e._v("，简单的过程如下图：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/e111df7e85e6afc415fc3c4494a6b0cd.png",alt:"第一次发起HTTP请求"}})]),e._v(" "),_("p",[e._v("由上图我们可以知道：")]),e._v(" "),_("ul",[_("li",[e._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识。")]),e._v(" "),_("li",[e._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中。")])]),e._v(" "),_("p",[e._v("以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了，本文也将围绕着这点进行详细分析。")]),e._v(" "),_("p",[e._v("为了方便大家理解，这里我们根据是否需要向服务器重新发起 "),_("code",[e._v("HTTP")]),e._v(" 请求将缓存过程分为两个部分，分别是"),_("strong",[e._v("强制缓存")]),e._v("和"),_("strong",[e._v("协商缓存")]),e._v("。")]),e._v(" "),_("h3",{attrs:{id:"强制缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 强制缓存")]),e._v(" "),_("p",[e._v("强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程，强制缓存的情况主要有三种：")]),e._v(" "),_("ul",[_("li",[e._v("不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致），如下图：")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/21e4e59d92db2f9b2a23ed87d9de0a17.png",alt:"强制缓存"}})]),e._v(" "),_("ul",[_("li",[e._v("存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存(暂不分析)，如下图：")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/f3177fb2e9ac086cbc65ebd351ba685d.png",alt:"强制缓存"}})]),e._v(" "),_("ul",[_("li",[e._v("存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果，如下图：")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/985df827046187a5d32d7dda76b5db48.png",alt:"强制缓存"}})]),e._v(" "),_("blockquote",[_("p",[e._v("那么强制缓存的缓存规则是什么？")])]),e._v(" "),_("p",[e._v("当浏览器向服务器发起请求时，服务器会将缓存规则放入 "),_("code",[e._v("HTTP")]),e._v(" 响应报文的 "),_("code",[e._v("HTTP")]),e._v(" 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 "),_("code",[e._v("Expires")]),e._v(" 和 "),_("code",[e._v("Cache-Control")]),e._v("，其中 "),_("code",[e._v("Cache-Control")]),e._v(" 优先级比"),_("code",[e._v("Expires")]),e._v(" 高。")]),e._v(" "),_("h4",{attrs:{id:"expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expires","aria-hidden":"true"}},[e._v("#")]),e._v(" Expires")]),e._v(" "),_("p",[_("code",[e._v("Expires")]),e._v(" 是 "),_("code",[e._v("HTTP/1.0")]),e._v(" 控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于"),_("code",[e._v("Expires")]),e._v(" 的值时，直接使用缓存结果。")]),e._v(" "),_("blockquote",[_("p",[_("code",[e._v("Expires")]),e._v(" 是 "),_("code",[e._v("HTTP/1.0")]),e._v(" 的字段，但是现在浏览器默认使用的是 "),_("code",[e._v("HTTP/1.1")]),e._v("，那么在 "),_("code",[e._v("HTTP/1.1")]),e._v(" 中网页缓存还是否由 "),_("code",[e._v("Expires")]),e._v(" 控制？")])]),e._v(" "),_("p",[e._v("到了 "),_("code",[e._v("HTTP/1.1")]),e._v("，"),_("code",[e._v("Expire")]),e._v(" 已经被 "),_("code",[e._v("Cache-Control")]),e._v(" 替代，原因在于 "),_("code",[e._v("Expires")]),e._v(" 控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么 "),_("code",[e._v("Cache-Control")]),e._v(" 又是如何控制的呢？")]),e._v(" "),_("h4",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[e._v("#")]),e._v(" Cache-Control")]),e._v(" "),_("p",[e._v("在 "),_("code",[e._v("HTTP/1.1")]),e._v(" 中，"),_("code",[e._v("Cache-Control")]),e._v(" 是最重要的规则，主要用于控制网页缓存，主要取值为：")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("public")]),e._v("：所有内容都将被缓存（客户端和代理服务器都可缓存）。")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("private")]),e._v("：所有内容只有客户端可以缓存，"),_("code",[e._v("Cache-Control")]),e._v(" 的默认取值。")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("no-cache")]),e._v("：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定。")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("no-store")]),e._v("：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存。")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("max-age=xxx (xxx is numeric)")]),e._v("：缓存内容将在 "),_("code",[e._v("xxx")]),e._v(" 秒后失效。")])])]),e._v(" "),_("p",[e._v("接下来，我们直接看一个例子，如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/aed2f635e77f7b6c215655e214b9ae7f.png",alt:"强制缓存"}})]),e._v(" "),_("p",[e._v("由上面的例子我们可以知道：")]),e._v(" "),_("p",[_("code",[e._v("HTTP")]),e._v(" 响应报文中 "),_("code",[e._v("expires")]),e._v(" 的时间值，是一个绝对值。")]),e._v(" "),_("p",[_("code",[e._v("HTTP")]),e._v(" 响应报文中 "),_("code",[e._v("Cache-Control")]),e._v(" 为 "),_("code",[e._v("max-age=600")]),e._v("，是相对值。")]),e._v(" "),_("p",[e._v("由于 "),_("code",[e._v("Cache-Control")]),e._v(" 的优先级比 "),_("code",[e._v("expires")]),e._v("，那么直接根据 "),_("code",[e._v("Cache-Control")]),e._v(" 的值进行缓存，意思就是说在 "),_("code",[e._v("600")]),e._v(" 秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。")]),e._v(" "),_("p",[e._v("注：在无法确定客户端的时间是否与服务端的时间同步的情况下，"),_("code",[e._v("Cache-Control")]),e._v(" 相比于 "),_("code",[e._v("expires")]),e._v(" 是更好的选择，所以同时存在时，只有"),_("code",[e._v("Cache-Control")]),e._v(" 生效。")]),e._v(" "),_("p",[e._v("了解强制缓存的过程后，我们拓展性的思考一下：")]),e._v(" "),_("blockquote",[_("p",[e._v("浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/9ef4986f8ec16aebebd6f1caefd55d5d.png",alt:"强制缓存"}})]),e._v(" "),_("p",[e._v("这里我们以博客的请求为例，状态码为灰色的请求则代表使用了强制缓存，请求对应的 "),_("code",[e._v("Size")]),e._v(" 值则代表该缓存存放的位置，分别为 "),_("code",[e._v("from memory cache")]),e._v(" 和 "),_("code",[e._v("from disk cache")]),e._v("。")]),e._v(" "),_("p",[e._v("那么 "),_("code",[e._v("from memory cache")]),e._v(" 和 "),_("code",[e._v("from disk cache")]),e._v(" 又分别代表的是什么呢？什么时候会使用 "),_("code",[e._v("from disk cache")]),e._v("，什么时候会使用"),_("code",[e._v("from memory cache")]),e._v(" 呢？")]),e._v(" "),_("p",[_("code",[e._v("from memory cache")]),e._v(" 代表使用内存中的缓存，"),_("code",[e._v("from disk cache")]),e._v(" 则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为 "),_("code",[e._v("memory –> disk")]),e._v("。")]),e._v(" "),_("p",[e._v("虽然我已经直接把结论说出来了，但是相信有不少人对此不能理解，那么接下来我们一起详细分析一下缓存读取问题，这里仍让以我的博客为例进行分析：")]),e._v(" "),_("ol",[_("li",[e._v("访问 "),_("code",[e._v("https://heyingye.github.io/")]),e._v(" –> "),_("code",[e._v("200")])]),e._v(" "),_("li",[e._v("关闭博客的标签页 –> 重新打开 "),_("code",[e._v("https://heyingye.github.io/")]),e._v(" –> "),_("code",[e._v("200 (from disk cache)")])]),e._v(" "),_("li",[e._v("刷新 –> "),_("code",[e._v("200(from memory cache)")])])]),e._v(" "),_("blockquote",[_("p",[e._v("看到这里可能有人小伙伴问了，最后一个步骤刷新的时候，不是同时存在着 from disk cache 和 from memory cache 吗？")])]),e._v(" "),_("p",[e._v("对于这个问题，我们需要了解内存缓存（"),_("code",[e._v("from memory cache")]),e._v("）和硬盘缓存（"),_("code",[e._v("from disk cache")]),e._v("），如下:")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("内存缓存("),_("code",[e._v("from memory cache")]),e._v(")：内存缓存具有两个特点，分别是"),_("strong",[e._v("快速读取")]),e._v("和"),_("strong",[e._v("时效性")]),e._v("：")]),e._v(" "),_("ul",[_("li",[_("p",[_("strong",[e._v("快速读取")]),e._v("：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。")])]),e._v(" "),_("li",[_("p",[_("strong",[e._v("时效性")]),e._v("：一旦该进程关闭，则该进程的内存则会清空。")])])])]),e._v(" "),_("li",[_("p",[e._v("硬盘缓存（"),_("code",[e._v("from disk cache")]),e._v("）：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行 "),_("code",[e._v("I/O")]),e._v(" 操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。")])])]),e._v(" "),_("p",[e._v("在浏览器中，浏览器会在 "),_("code",[e._v("js")]),e._v(" 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取；而 "),_("code",[e._v("css")]),e._v(" 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存。")]),e._v(" "),_("h3",{attrs:{id:"协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),_("p",[_("strong",[e._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程")]),e._v("。")]),e._v(" "),_("p",[e._v("主要有以下两种情况：")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("协商缓存生效，返回 "),_("code",[e._v("304")]),e._v("，如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/50e14b0a28494997d560d5395f3d6dae.png",alt:"协商缓存"}})])]),e._v(" "),_("li",[_("p",[e._v("协商缓存失效，返回 "),_("code",[e._v("200")]),e._v(" 和请求结果结果，如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/49c53e602efbf8040a27b846bd923aea.png",alt:"协商缓存"}})])])]),e._v(" "),_("p",[e._v("同样，协商缓存的标识也是在响应报文的 "),_("code",[e._v("HTTP")]),e._v(" 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Last-Modified / If-Modified-Since")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("Etag / If-None-Match")]),e._v(".")])]),e._v(" "),_("p",[e._v("其中 "),_("code",[e._v("Etag / If-None-Match")]),e._v(" 的优先级比 "),_("code",[e._v("Last-Modified / If-Modified-Since")]),e._v(" 高。")]),e._v(" "),_("h4",{attrs:{id:"last-modified-if-modified-since"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since","aria-hidden":"true"}},[e._v("#")]),e._v(" Last-Modified / If-Modified-Since")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("Last-Modified")]),e._v(" 是服务器响应请求时，返回该资源文件在服务器最后被修改的时间，如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/b883a3df793d3d330644b7351243a5e6.png",alt:"协商缓存"}})])]),e._v(" "),_("li",[_("p",[_("code",[e._v("If-Modified-Since")]),e._v(" 则是客户端再次发起该请求时，携带上次请求返回的 "),_("code",[e._v("Last-Modified")]),e._v(" 值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有 "),_("code",[e._v("If-Modified-Since")]),e._v(" 字段，则会根据 "),_("code",[e._v("If-Modified-Since")]),e._v(" 的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于 "),_("code",[e._v("If-Modified-Since")]),e._v(" 的字段值，则重新返回资源，状态码为 "),_("code",[e._v("200")]),e._v("；否则则返回 "),_("code",[e._v("304")]),e._v("，代表资源无更新，可继续使用缓存文件，如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/af737ad0211018faf7bb0dfbd47ff2d2.png",alt:"协商缓存"}})])])]),e._v(" "),_("h4",{attrs:{id:"etag-if-none-match"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match","aria-hidden":"true"}},[e._v("#")]),e._v(" Etag / If-None-Match")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("Etag")]),e._v(" 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/a2a5ca7092f9d9ceb435317126fe112f.png",alt:"协商缓存"}})])]),e._v(" "),_("li",[_("p",[_("code",[e._v("If-None-Match")]),e._v(" 是客户端再次发起该请求时，携带上次请求返回的唯一标识 "),_("code",[e._v("Etag")]),e._v(" 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 "),_("code",[e._v("If-None-Match")]),e._v("，则会根据 "),_("code",[e._v("If-None-Match")]),e._v(" 的字段值与该资源在服务器的 "),_("code",[e._v("Etag")]),e._v("值做对比，一致则返回 "),_("code",[e._v("304")]),e._v("，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 "),_("code",[e._v("200")]),e._v("，如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/03ccaf19197565f16c59c81910d2f0ca.png",alt:"协商缓存"}})])])]),e._v(" "),_("p",[e._v("注："),_("code",[e._v("Etag / If-None-Match")]),e._v(" 优先级高于 "),_("code",[e._v("Last-Modified / If-Modified-Since")]),e._v("，同时存在则只有 "),_("code",[e._v("Etag / If-None-Match")]),e._v(" 生效。")]),e._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),_("p",[e._v("强制缓存优先于协商缓存进行，若强制缓存 "),_("code",[e._v("Expires")]),e._v(" 和 "),_("code",[e._v("Cache-Control")]),e._v(" 生效则直接使用缓存，若不生效则进行协商缓存（"),_("code",[e._v("Last-Modified / If-Modified-Since")]),e._v(" 和 "),_("code",[e._v("Etag / If-None-Match")]),e._v("）。")]),e._v(" "),_("p",[e._v("协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回    "),_("code",[e._v("304")]),e._v("，继续使用缓存，主要过程如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.mdnice.com/3e3cc0154d1a038b7caec00c50def728.png",alt:"HTTP 缓存"}})]),e._v(" "),_("p",[e._v("以上便是浏览器缓存的过程，若有错误之处，敬请指正。")])])}),[],!1,null,null,null);v.default=a.exports}}]);